<?php

/**
 * @file
 * Creates tests for comment_notify module.
 */
class CommentNotifyTestCase extends BackdropWebTestCase {

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('comment_notify');
    // Create a content type where commenting is enabled.
    // Allow contact info for anons on that content type, and make preview optional.
  }

  /**
   * Test various behaviors for anonymous users.
   */
  function testCommentNotifyAnonymousUserFunctionalTest() {
    // Code that does something to be tested.
    // Create and login administrative user.
    $admin_user = $this->backdropCreateUser(array('administer comment notify', 'administer permissions', 'administer comments'));
    $this->backdropLogin($admin_user);

    // Enable comment notify on this node, allow comment title, and allow anonymous information in comments.
    config_set('comment_notify.settings', 'node_types', array('post' => 'post', 'page' => 0));
    $this->setCommentSettings('comment_anonymous', '1', format_string('Anonymous commenting set to level @level.', array('@level' => '1')));
    $this->setCommentSettings('comment_subject_field', '1', 'Comment subject enabled.');

    // Create a node with comments allowed.
    $this->node = $this->backdropCreateNode(array('type' => 'post', 'promote' => NODE_PROMOTED, 'comment' => COMMENT_NODE_OPEN));

    // Allow anonymous users to post comments and get notifications.
    user_role_grant_permissions(BACKDROP_ANONYMOUS_ROLE, array('access comments', 'access content', 'post comments', 'skip comment approval', 'subscribe to comments'));
    $this->backdropLogout();

    // Notify type 1 - All comments on the node.
    // First confirm that we properly require an e-mail address.
    $subscribe_1 = array('notify' => TRUE, 'notify_type' => 1);

    $edit['subject'] = $this->randomName();
    $edit['comment_body[' . LANGUAGE_NONE . '][0][value]'] = $this->randomName();
    $edit += $subscribe_1;
    $this->backdropGet('comment/reply/' . $this->node->nid);
    $result = $this->backdropPost(NULL, $edit, t('Save'));
    $this->assertText('If you want to subscribe to comments you must supply a valid e-mail address.', 'Required email not found');

    // Try again with an e-mail address.
    $contact_1 = array('name' => $this->randomName(), 'mail' => $this->getRandomEmailAddress());
    $anonymous_comment_1 = $this->postCommentNotifyComment($this->node, $this->randomName(), $this->randomName(), $subscribe_1, $contact_1);

    // Confirm that the notification is saved.
    $result = comment_notify_get_notification_type($anonymous_comment_1->id);

    $this->assertEqual($result, $subscribe_1['notify_type'], 'Notify selection option 1 is saved properly.');

    // Notify type 2 - replies to a comment.
    $subscribe_2 = array('notify' => TRUE, 'notify_type' => 2);
    $contact_2 = array('name' => $this->randomName(), 'mail' => $this->getRandomEmailAddress());
    $anonymous_comment_2 = $this->postCommentNotifyComment($this->node, $this->randomName(), $this->randomName(), $subscribe_2, $contact_2);

    // Confirm that the notification is saved.
    $result = comment_notify_get_notification_type($anonymous_comment_2->id);
    $this->assertEqual($result, $subscribe_2['notify_type'], 'Notify selection option 2 is saved properly.');

    // Confirm that the original subscriber with all comments on this node got their mail.
    $this->assertMail('to', $contact_1['mail'], t('Message was sent to the proper anonymous user.'));

    // Notify type 0 (i.e. only one mode is enabled).
    config_set('comment_notify.settings', 'available_alerts', array(1 => 0, 2 => 2));
    $subscribe_0 = array('notify' => TRUE);
    $contact_0 = array('mail' => $this->getRandomEmailAddress());
    $anonymous_comment_0 = $this->postCommentNotifyComment($this->node, $this->randomName(), $this->randomName(), $subscribe_0, $contact_0);

    // Confirm that the notification is saved.
    $result = comment_notify_get_notification_type($anonymous_comment_0->id);

    $this->assertEqual($result, 2, 'Notify selection option 0 is saved properly.');

    // TODO yet more tests.
  }

  /////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  ////////////////////////// COPIED FROM 7.X COMMENT.TEST \\\\\\\\\\\\\\\\\\\\\
  //////////////////////////////and tweaked a little\\\\\\\\\\\\\\\\\\\\\\\\\\\
  /////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  /**
   * Post comment.
   *
   * @param object $node Node to post comment on.
   * @param string $subject Comment subject.
   * @param string $comment Comment body.
   * @param boolean $notify Notify options.
   * @param mixed $contact Set to NULL for no contact info, TRUE to ignore success checking, and array of values to set contact info.
   */
  function postCommentNotifyComment($node, $subject = '', $comment, $notify, $contact = NULL) {
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['comment_body[' . $langcode . '][0][value]'] = $comment;
    $node_type = node_type_get_type('post');
    $preview_mode = $node_type->settings['comment_preview'];
    $subject_mode = $node_type->settings['comment_subject_field'];

    // Must get the page before we test for fields.
    if ($node !== NULL) {
      $this->backdropGet('comment/reply/' . $node->nid);
    }

    if ($subject_mode == TRUE) {
      $edit['subject'] = $subject;
    }
    else {
      $this->assertNoFieldByName('subject', '', 'Title field not found.');
    }

    if ($notify !== NULL && is_array($notify)) {
      $edit += $notify;
    }

    if ($contact !== NULL && is_array($contact)) {
      $edit += $contact;
    }
    switch ($preview_mode) {
      case BACKDROP_REQUIRED:
        // Preview required so no save button should be found.
        $this->assertNoFieldByName('op', t('Save'), 'Save button not found.');
        $this->backdropPost(NULL, $edit, t('Preview'));
        // Don't break here so that we can test post-preview field presence and
        // function below.
      case BACKDROP_OPTIONAL:
        $this->assertFieldByName('op', t('Preview'), 'Preview button found.');
        $this->assertFieldByName('op', t('Save'), 'Save button found.');
        $this->backdropPost(NULL, $edit, t('Save'));
        break;

      case BACKDROP_DISABLED:
        $this->assertNoFieldByName('op', t('Preview'), 'Preview button not found.');
        $this->assertFieldByName('op', t('Save'), 'Save button found.');
        $this->backdropPost(NULL, $edit, t('Save'));
        break;
    }
    $match = array();
    // Get comment ID
    preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);

    // Get comment.
    if ($contact !== TRUE) { // If true then attempting to find error message.
      if ($subject && $subject_mode) {
        $this->assertText($subject, 'Comment subject posted.');
      }
      $this->assertText($comment, 'Comment body posted.');
      $this->assertTrue((!empty($match) && !empty($match[1])), 'Comment id found.');
    }

    if (isset($match[1])) {
      return entity_create('comment', array('id' => $match[1], 'subject' => $subject, 'comment' => $comment));
    }
  }

  /**
   * Checks current page for specified comment.
   *
   * @param object $comment Comment object.
   * @param boolean $reply The comment is a reply to another comment.
   * @return boolean Comment found.
   */
  function commentExists($comment, $reply = FALSE) {
    if ($comment && is_object($comment)) {
      $regex = '/' . ($reply ? '<div class="indented">(.*?)' : '');
      $regex .= '<a id="comment-' . $comment->id . '"(.*?)'; // Comment anchor.
      $regex .= '<article(.*?)'; // Begin in comment wrapper.
      $regex .= $comment->subject . '(.*?)'; // Match subject.
      $regex .= $comment->comment . '(.*?)'; // Match comment.
      $regex .= '/s';

      return (boolean)preg_match($regex, $this->backdropGetContent());
    }
    else {
      return FALSE;
    }
  }

  /**
   * Returns a randomly generated valid email address.
   *
   * @return string.
   */
  function getRandomEmailAddress() {
    return $this->randomName() . '@example.com';
  }

  /**
   * Sets a comment config for the post content type.
   *
   * @param string $name
   *   Name of setting.
   * @param string $value
   *   Value of setting.
   * @param string $message
   *   Status message to display.
   */
  function setCommentSettings($name, $value, $message) {
    $node_type = node_type_get_type('post');
    $node_type->settings[$name] = $value;
    node_type_save($node_type);
    // Display status message.
    $this->pass($message);
  }
}
